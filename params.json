{"name":"sfAdminDashPlugin","body":"# sfAdminDashPlugin\r\n\r\n## Overview\r\n\r\nI found for all my symfony projects which had backends I had to create a\r\nmenu to access all the various modules.  This plugin automates the\r\nprocess by using a configuration file.\r\n\r\n### Requirements:\r\n\r\n[sfJqueryReloadedPlugin](http://www.symfony-project.org/plugins/sfJqueryReloadedPlugin)\r\nThis plugin depends on sfJqueryReloadedPlugin to create the dropdown\r\nmenu and manipulate the view. If this plugin is not yet installed,\r\nthe symfony plugin dependency system will install it when you install\r\nsfAdminDashPlugin.\r\n\r\n## How to use\r\n\r\n### Step 1 - install plugin\r\n\r\nInstall the plugin, publish the assets and clear the cache.\r\n\r\n```\r\n$ symfony plugin:install sfAdminDashPlugin\r\n$ symfony plugin:publish-assets\r\n$ symfony cc\r\n```\r\n\r\nThen activate the sfAdminDash module in the application's *settings.yml*\r\n\r\n    # in application/config/settings.yml\r\n    enabled_modules:          [default, sfAdminDash]\r\n\r\n### Step 2 - setup theme\r\n\r\nAdd the plugin's header and footer to your application's global\r\nlayout:\r\n\r\n```html+php\r\n<!-- in application/templates/layout.php -->\r\n<body>\r\n  <?php include_component('sfAdminDash', 'header'); ?>\r\n  <?php echo $sf_content ?>\r\n  <?php include_partial('sfAdminDash/footer'); ?>\r\n</body>\r\n```\r\n\r\n\r\nIf you have admin generator modules, deactivate the default admin\r\ngenerator theme in each module's *generator.yml* by setting the css\r\nproperty.  You can either point the css property to a real stylesheet or\r\njust disable it.\r\n\r\n```yaml\r\n# in application/modules/admin_generated_module/config/generator.yml\r\ngenerator:\r\n  class: sfPropelGenerator\r\n  param:\r\n    model_class:           Article\r\n    theme:                 admin\r\n    non_verbose_templates: true\r\n    with_show:             false\r\n    singular:              ~\r\n    plural:                ~\r\n    route_prefix:          article\r\n    with_propel_route:     true\r\n    css:                   false   # disable the default css\r\n\r\n    config:\r\n      actions: ~\r\n      fields:  ~\r\n      list:    ~\r\n      filter:  ~\r\n      form:    ~\r\n      edit:    ~\r\n      new:     ~\r\n```\r\n\r\nIn the future I would like to create an actual theme by overriding the\r\ndefault files but I found an issue when trying to do this (see [my\r\nticket](http://trac.symfony-project.org/ticket/5697))\r\n\r\n  At this point your modules should be styled with the joomla-like\r\ntheme.  There should also be a warning saying *sfAdminDashPlugin not configured. Please\r\nsee documentation.*  We will fix that soon.\r\n\r\n### Step 3 (optional) - setup the dashboard\r\n\r\nSet your application's *homepage* in your application's *routing.yml* to:\r\n\r\n```yaml\r\n# in application/config/routing.yml\r\nhomepage:\r\n  url:   /\r\n  param: { module: sfAdminDash, action: dashboard }\r\n```\r\n\r\n### Step 4 - set global plugin configuration\r\n\r\nThe plugin's *app.yml* file looks like this:\r\n\r\n```yaml\r\n# in plugins/sfAdminDashPlugin/config/app.yml\r\nall:\r\n  sf_admin_dash:\r\n    web_dir:                      /sfAdminDashPlugin\r\n    image_dir:                    /sfAdminDashPlugin/images/icons/\r\n    default_image:                config.png\r\n    dashboard_url:                @homepage\r\n    resize_mode:                  thumbnail\r\n    site:                         My Site Name\r\n    include_path:                 true\r\n    include_assets:               true\r\n    include_jquery:               true\r\n    include_jquery_no_conflict:   false\r\n    login_route:                  @sf_guard_signin\r\n    logout:                       true\r\n    logout_route:                 @sf_guard_signout\r\n```\r\n\r\n* web_dir - Where the plugin's default css/javascript/images are kept.\r\n* image_dir - Where your images for the dash/menu items are kept -\r\nimages should be 48x48.\r\n* default_image - The default item image if none is specified - this\r\nmust be in the *image_dir* folder.\r\n* resize_mode - How the image will be resized for the menu items.\r\n    * thumbnail - Looks for a directory inside *image_dir* called *small*\r\nfor an image with the same name - it should be 16x16px.\r\n    * html - Resizes the image with the html *img* tag width/height attributes.\r\n* site - What you would like the site name to be (shows up in the *path\r\nbar* as a link and on the login page).\r\n* include_path - Whether to generate path \"breadcrumbs\". Those are meant mainly for the admin generator.\r\n* include_assets - Whether the plugin's assets (css and js) should be included. Leave this to true unless you intend to reskin the plugin.\r\n* include_jquery - Whether to include jquery. Depends on sfJqueryReloadedPlugin.\r\n* include_jquery_no_conflict - In case you are using another JS framework in you website, you should set this to true. It will prevent jQuery from interfering.\r\n* login_route - The route to the login action, defaults to the sfGuardPlugin's.\r\n* logout -  Whether a logout link will be shown.\r\n* logout_route - The route to the logout action, defaults to the sfGuardPlugin's.\r\n\r\nYou can override these settings as you see fit.\r\n\r\n### Step 5 - configure the dashboard/menu items\r\n\r\nItems are controlled by your application's *app.yml* file.  The best way\r\nto show how to use this is with an example:\r\n\r\n  I have created a backend application with 2 admin modules: *Comment* and *Article*.\r\n\r\n  To create dashboard/menu items for these modules I will use this configuration:\r\n\r\n```yaml\r\n# in application/config/app.yml\r\nall:\r\n  sf_admin_dash:\r\n    items:\r\n      Articles:\r\n        url:              article\r\n      Comments:\r\n        url:              comment\r\n```\r\n\r\nThis creates 2 items on the dashboard and a *Menu* dropdown.  The url\r\nproperty should be an internal URI.  You can also set credentials and an\r\nimage.  The *image* property can be just the image name - the plugin will look\r\nfor it in the folder specified in the global settings. Alternatively you can\r\nalso specify an absolute path, like so ``image: /somefolder/someimage.jpg``.\r\n\r\n  The credential property can be used to hide options from users who do\r\nnot have specific credentials.  This gives the ability for different\r\nusers to see different options.  The format for this is the same as when\r\nsetting credentials in *security.yml*.\r\n\r\n  **NOTE:  This just prevents the user from seeing the item.  You still\r\nneed to setup the same credentials in *security.yml* to prevent the user\r\nfrom accessing the module.**\r\n\r\nHere is an example configuration:\r\n\r\n```yaml\r\n# in application/config/app.yml\r\nall:\r\n  sf_admin_dash:\r\n    items:\r\n      Articles:\r\n        url:              article\r\n        image:            book.png\r\n        credentials:      [[admin, publisher]]\r\n      Comments:\r\n        url:              comment\r\n        image:            textcloud.png\r\n        credentials:      [admin]\r\n```\r\n\r\nThe above example shows the *Articles* item only to users with the\r\n**admin** or **publisher** credential and the *Comments* item only to\r\nusers with the **admin** credential.  The images are self explanatory.\r\n\r\nPackaged with this plugin is a small library of images that can be used.\r\n\r\nYou can group items into categories as well by embedding the items into\r\na *category name* property under *categories* property:\r\n\r\n```yaml\r\n# in application/config/app.yml\r\nall:\r\n  sf_admin_dash:\r\n    categories:\r\n      Blog:\r\n        items:\r\n          Articles:\r\n            url:          article\r\n            image:        book.png\r\n            credentials:  [[admin, publisher]]\r\n          Comments:\r\n            url:          comment\r\n            image:        textcloud.png\r\n            credentials:  [admin]\r\n      Category2:\r\n        items:\r\n          ...\r\n```\r\n\r\nCategory names are not only seperated on the dashboard but they have\r\ntheir own dropdown menu.\r\n\r\n  You can set credentials to entire categories like so:\r\n\r\n```yaml\r\n# in application/config/app.yml\r\nall:\r\n  sf_admin_dash:\r\n    categories:\r\n      Blog:\r\n        credentials:      [ admin ]\r\n        items:\r\n          Articles:\r\n            url:          article\r\n            image:        book.png\r\n          Comments:\r\n            url:          comment\r\n            image:        textcloud.png\r\n```\r\n\r\nThis hides the entire category from the user if they don't have the\r\n**admin** credential.\r\n\r\nBy default the plugin header prints a cookie trail in the format \"module / action\".\r\nTo make module and action names more user-friendly you can overwrite them using the\r\n\"translator\" property like so:\r\n\r\n```yaml\r\n# in application/config/app.yml\r\nall:\r\n  sf_admin_dash:\r\n    translator:\r\n      sfGuardUser:                # the module we are translating\r\n        title:            Users   # title for that module\r\n        actions:                  # actions array\r\n          editUser:       edit    # here we specify each action and its translation\r\n```\r\n\r\n### Step 6 (optional) - setting up login screen\r\n\r\nPackaged with this plugin is a partial called *login*.  Currently, it only works\r\nwith sfGuardPlugin. Include it like this:\r\n\r\n```html+php\r\n// in application/modules/sfGuardAuth/templates/signinSuccess.php\r\n<?php include_partial('sfAdminDash/login', array('form' => $form)); ?>\r\n```\r\n\r\n### Step 7 (optional) - setting up User actions\r\n\r\nUser actions can be optionally set in *app.yml*:\r\n\r\n```yaml\r\n# in application/config/app.yml\r\nall:\r\n  sf_admin_dash:\r\n    user_actions:\r\n      \"New Ticket\":\r\n        url:              @cms_ticket_new\r\n      \"My Tickets\":\r\n        url:              @cms_ticket\r\n      \"Clear cache\":\r\n        url:              @clear_app_cache\r\n        credentials:      [ admin ]\r\n```\r\n\r\nThese show up as a list of links next to the logout button.  Override the _user_actions partial if you wish to add some kind of logic to the action display.\r\n\r\n### todo\r\n* use an actual admin generator theme\r\n* clean up css\r\n\r\nFeel free to email suggestions/bugs.","tagline":"symfony dashboard interface for application backend","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}